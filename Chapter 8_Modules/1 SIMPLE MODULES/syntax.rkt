#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 56 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 4 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1
          0 1655 0 26 3 10 #"#lang eopl"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"provide"
0 0 22 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 10 #";;; Syntax"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 22 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 1 #" "
0 0 14 3 8 #"program?"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 9 #"a-program"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 6 #"m-defs"
0 0 22 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 22 3 1 #" "
0 0 14 3 18 #"module-definition?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 22 3 1 #" "
0 0 14 3 17 #"module-definition"
0 0 22 3 1 #" "
0 0 14 3 18 #"module-definition?"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 19 #"a-module-definition"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 6 #"m-name"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 14 #"expected-iface"
0 0 22 3 1 #" "
0 0 14 3 10 #"interface?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 6 #"m-body"
0 0 22 3 1 #" "
0 0 14 3 12 #"module-body?"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 22 3 1 #" "
0 0 15 3 9 #"interface"
0 0 22 3 1 #" "
0 0 14 3 10 #"interface?"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 12 #"simple-iface"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 5 #"decls"
0 0 22 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 22 3 1 #" "
0 0 14 3 12 #"declaration?"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 22 3 1 #" "
0 0 14 3 11 #"declaration"
0 0 22 3 1 #" "
0 0 14 3 12 #"declaration?"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"val-decl"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 8 #"var-name"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 2 #"ty"
0 0 22 3 1 #" "
0 0 14 3 5 #"type?"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 22 3 1 #" "
0 0 14 3 11 #"module-body"
0 0 22 3 1 #" "
0 0 14 3 12 #"module-body?"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 17 #"defns-module-body"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 5 #"defns"
0 0 22 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 22 3 1 #" "
0 0 15 3 11 #"definition?"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 22 3 1 #" "
0 0 15 3 10 #"definition"
0 0 22 3 1 #" "
0 0 15 3 11 #"definition?"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"val-defn"
0 0 22 3 2 #" ("
0 0 14 3 8 #"var-name"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 3 #") ("
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 22 3 1 #" "
0 0 14 3 10 #"expression"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 17 #"qualified-var-exp"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 6 #"m-name"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 8 #"var-name"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 9 #"const-exp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 14 3 7 #"number?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"diff-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 3 #") ("
0 0 14 3 4 #"exp2"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 9 #"zero?-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 6 #"if-exp"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 4 #"exp2"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 4 #"exp3"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 7 #"var-exp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 7 #"let-exp"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"proc-exp"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 2 #"ty"
0 0 22 3 1 #" "
0 0 14 3 5 #"type?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"call-exp"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 5 #"rator"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 4 #"rand"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 10 #"letrec-exp"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 9 #"result-ty"
0 0 22 3 1 #" "
0 0 14 3 5 #"type?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 6 #"p-name"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 5 #"b-var"
0 0 22 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 8 #"b-var-ty"
0 0 22 3 1 #" "
0 0 14 3 5 #"type?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 6 #"p-body"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 11 #"letrec-body"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  )"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 22 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 5 #"type?"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"   "
0 0 17 3 2 #";("
0 0 17 3 10 #"named-type"
0 0 17 3 2 #" ("
0 0 17 3 4 #"name"
0 0 17 3 1 #" "
0 0 17 3 9 #"symbol?))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"   "
0 0 17 3 16 #";(qualified-type"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"   "
0 0 17 3 3 #"; ("
0 0 17 3 6 #"m-name"
0 0 17 3 1 #" "
0 0 17 3 8 #"symbol?)"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"   "
0 0 17 3 3 #"; ("
0 0 17 3 6 #"t-name"
0 0 17 3 1 #" "
0 0 17 3 9 #"symbol?))"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 8 #"int-type"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 9 #"bool-type"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 9 #"proc-type"
0 0 22 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 22 3 1 #" "
0 0 14 3 5 #"type?"
0 0 22 3 3 #") ("
0 0 14 3 11 #"result-type"
0 0 22 3 1 #" "
0 0 14 3 5 #"type?"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 15 #"program->string"
0 0 22 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 9 #"a-program"
0 0 22 3 2 #" ("
0 0 15 3 4 #"defs"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 13 #"string-append"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 18 #"moduledefs->string"
0 0 22 3 1 #" "
0 0 15 3 4 #"defs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 19 3 4 #"\"\\n\""
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 6 #" )))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 18 #"moduledefs->string"
0 0 22 3 1 #" "
0 0 15 3 4 #"defs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 5 #"apply"
0 0 22 3 1 #" "
0 0 14 3 13 #"string-append"
0 0 22 3 2 #" ("
0 0 14 3 3 #"map"
0 0 22 3 1 #" "
0 0 14 3 17 #"moduledef->string"
0 0 22 3 1 #" "
0 0 15 3 4 #"defs"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"moduledef->string"
0 0 22 3 1 #" "
0 0 15 3 3 #"def"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 17 #"module-definition"
0 0 22 3 1 #" "
0 0 15 3 3 #"def"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 19 #"a-module-definition"
0 0 22 3 2 #" ("
0 0 14 3 6 #"m-name"
0 0 22 3 1 #" "
0 0 14 3 14 #"expected-iface"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 26 #"                         ("
0 0 14 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 9 #"\"module \""
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 14 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-name"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                        "
0 0 19 3 16 #"\"\\n interface\\n\""
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 14 3 17 #"interface->string"
0 0 22 3 1 #" "
0 0 14 3 14 #"expected-iface"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 40 #"                                        "
0 0 19 3 11 #"\"\\n body\\n\""
0 0 22 29 1 #"\n"
0 0 22 3 41 #"                                        ("
0 0 14 3 13 #"mbody->string"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-body"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 17 #"interface->string"
0 0 22 3 1 #" "
0 0 14 3 5 #"iface"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 15 3 9 #"interface"
0 0 22 3 1 #" "
0 0 14 3 5 #"iface"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 12 #"simple-iface"
0 0 22 3 2 #" ("
0 0 14 3 5 #"decls"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 5 #"apply"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                   "
0 0 14 3 13 #"string-append"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 14 3 6 #"append"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 19 3 3 #"\"[\""
0 0 22 3 3 #") ("
0 0 14 3 3 #"map"
0 0 22 3 1 #" "
0 0 14 3 12 #"decl->string"
0 0 22 3 1 #" "
0 0 14 3 5 #"decls"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 19 3 3 #"\"]\""
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"decl->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"decl"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 11 #"declaration"
0 0 22 3 1 #" "
0 0 14 3 4 #"decl"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 8 #"val-decl"
0 0 22 3 2 #" ("
0 0 14 3 8 #"var-name"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 13 #"string-append"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 19 3 3 #"\" \""
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 14 3 8 #"var-name"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 19 3 5 #"\" : \""
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 12 #"type->string"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 19 3 4 #"\"\\n\""
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 13 #"mbody->string"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 11 #"module-body"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-body"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 17 #"defns-module-body"
0 0 22 3 2 #" ("
0 0 15 3 5 #"defns"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 5 #"apply"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 14 3 13 #"string-append"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 6 #"append"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 19 3 3 #"\"[\""
0 0 22 3 3 #") ("
0 0 14 3 3 #"map"
0 0 22 3 1 #" "
0 0 15 3 12 #"defn->string"
0 0 22 3 1 #" "
0 0 15 3 5 #"defns"
0 0 22 3 2 #") "
0 0 20 3 1 #"'"
0 0 22 3 1 #"("
0 0 19 3 3 #"\"]\""
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 15 3 12 #"defn->string"
0 0 22 3 1 #" "
0 0 15 3 4 #"defn"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 15 3 10 #"definition"
0 0 22 3 1 #" "
0 0 15 3 4 #"defn"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 8 #"val-defn"
0 0 22 3 2 #" ("
0 0 14 3 8 #"var-name"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 13 #"string-append"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 19 3 3 #"\" \""
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 14 3 8 #"var-name"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 19 3 5 #"\" = \""
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"               "
0 0 19 3 4 #"\"\\n\""
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 12 #"type->string"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 2 #";("
0 0 17 3 10 #"named-type"
0 0 17 3 2 #" ("
0 0 17 3 4 #"name"
0 0 17 3 3 #") ("
0 0 17 3 14 #"symbol->string"
0 0 17 3 1 #" "
0 0 17 3 7 #"name)) "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 2 #";("
0 0 17 3 14 #"qualified-type"
0 0 17 3 2 #" ("
0 0 17 3 6 #"m-name"
0 0 17 3 1 #" "
0 0 17 3 6 #"t-name"
0 0 17 3 16 #") (string-append"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 41 #";                                 \"from \""
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 35 #";                                 ("
0 0 17 3 14 #"symbol->string"
0 0 17 3 1 #" "
0 0 17 3 7 #"m-name)"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 42 #";                                 \" take \""
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 17 3 35 #";                                 ("
0 0 17 3 14 #"symbol->string"
0 0 17 3 1 #" "
0 0 17 3 9 #"t-name)))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 8 #"int-type"
0 0 22 3 4 #" () "
0 0 19 3 5 #"\"int\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 9 #"bool-type"
0 0 22 3 4 #" () "
0 0 19 3 6 #"\"bool\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 9 #"proc-type"
0 0 22 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 22 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 22 3 4 #" ) ("
0 0 14 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 22 3 2 #" ("
0 0 14 3 12 #"type->string"
0 0 22 3 1 #" "
0 0 14 3 8 #"arg-type"
0 0 22 3 2 #") "
0 0 19 3 6 #"\" -> \""
0 0 22 3 2 #" ("
0 0 14 3 12 #"type->string"
0 0 22 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 22 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    ))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 10 #"expression"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 9 #"const-exp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 3 #") ("
0 0 14 3 14 #"number->string"
0 0 22 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 7 #"var-exp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 3 #") ("
0 0 14 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 17 #"qualified-var-exp"
0 0 22 3 2 #" ("
0 0 14 3 6 #"m-name"
0 0 22 3 1 #" "
0 0 14 3 8 #"var-name"
0 0 22 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                     "
0 0 19 3 8 #"\"(from \""
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                     ("
0 0 14 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-name"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                     "
0 0 19 3 8 #"\" take \""
0 0 22 29 1 #"\n"
0 0 22 3 38 #"                                     ("
0 0 14 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 14 3 8 #"var-name"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 37 #"                                     "
0 0 19 3 3 #"\")\""
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 8 #"diff-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 4 #"val2"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 22 3 1 #" "
0 0 14 3 4 #"val1"
0 0 22 3 1 #" "
0 0 19 3 5 #"\" - \""
0 0 22 3 1 #" "
0 0 14 3 4 #"val2"
0 0 22 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 9 #"zero?-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 4 #" )))"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 8 #"\"zero? \""
0 0 22 3 1 #" "
0 0 14 3 4 #"val1"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 6 #"if-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 3 #" ))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 4 #"val2"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 3 #" ))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 4 #"val3"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 22 3 4 #" )))"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 5 #"\"if \""
0 0 22 3 1 #" "
0 0 14 3 4 #"val1"
0 0 22 3 1 #" "
0 0 19 3 8 #"\" then \""
0 0 22 3 1 #" "
0 0 14 3 4 #"val2"
0 0 22 3 1 #" "
0 0 19 3 8 #"\" else \""
0 0 22 3 1 #" "
0 0 14 3 4 #"val3"
0 0 22 3 4 #" )))"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 7 #"let-exp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 8 #")       "
0 0 22 29 1 #"\n"
0 0 22 3 14 #"             ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 20 #"                   ("
0 0 14 3 4 #"val2"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 6 #"\"let \""
0 0 22 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #") "
0 0 19 3 5 #"\" = \""
0 0 22 3 1 #" "
0 0 14 3 4 #"val1"
0 0 22 3 1 #" "
0 0 19 3 6 #"\" in \""
0 0 22 3 1 #" "
0 0 14 3 4 #"val2"
0 0 22 3 4 #") ))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 8 #"proc-exp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 3 #"val"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 7 #"\"proc(\""
0 0 22 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #") "
0 0 19 3 3 #"\":\""
0 0 22 3 2 #" ("
0 0 14 3 12 #"type->string"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 3 2 #") "
0 0 19 3 3 #"\")\""
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 8 #"call-exp"
0 0 22 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 22 3 1 #" "
0 0 14 3 4 #"rand"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 5 #"rator"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 21 #"                    ("
0 0 14 3 4 #"val2"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 4 #"rand"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 22 3 1 #" "
0 0 14 3 4 #"val1"
0 0 22 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 22 3 1 #" "
0 0 14 3 4 #"val2"
0 0 22 3 1 #" "
0 0 19 3 3 #"\")\""
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 10 #"letrec-exp"
0 0 22 3 2 #" ("
0 0 14 3 13 #"p-result-type"
0 0 22 3 1 #" "
0 0 14 3 6 #"p-name"
0 0 22 3 1 #" "
0 0 14 3 5 #"b-var"
0 0 22 3 1 #" "
0 0 14 3 10 #"b-var-type"
0 0 22 3 1 #" "
0 0 14 3 6 #"p-body"
0 0 22 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 3 #"ty1"
0 0 22 3 2 #" ("
0 0 14 3 12 #"type->string"
0 0 22 3 1 #" "
0 0 14 3 13 #"p-result-type"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 14 3 4 #"val1"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 6 #"p-body"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 14 3 3 #"ty2"
0 0 22 3 2 #" ("
0 0 14 3 12 #"type->string"
0 0 22 3 1 #" "
0 0 14 3 10 #"b-var-type"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 23 #"                      ("
0 0 14 3 4 #"val2"
0 0 22 3 2 #" ("
0 0 14 3 11 #"exp->string"
0 0 22 3 1 #" "
0 0 14 3 11 #"letrec-body"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 13 #"string-append"
0 0 22 3 1 #" "
0 0 19 3 9 #"\"letrec \""
0 0 22 3 1 #" "
0 0 14 3 3 #"ty1"
0 0 22 3 1 #" "
0 0 19 3 3 #"\" \""
0 0 22 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 14 3 6 #"p-name"
0 0 22 3 2 #") "
0 0 19 3 3 #"\"(\""
0 0 22 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 22 3 1 #" "
0 0 14 3 5 #"b-var"
0 0 22 3 2 #") "
0 0 19 3 3 #"\":\""
0 0 22 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 22 3 1 #" "
0 0 19 3 6 #"\") = \""
0 0 22 3 1 #" "
0 0 14 3 4 #"val1"
0 0 22 3 1 #" "
0 0 19 3 6 #"\" in \""
0 0 22 3 1 #" "
0 0 14 3 4 #"val2"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    ))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 63
#";;;;;;;;;;;;;;;; syntactic tests and observers ;;;;;;;;;;;;;;;;"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 14 #";;;; for types"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"atomic-type?"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 2 #"ty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 9 #"proc-type"
0 0 22 3 2 #" ("
0 0 14 3 3 #"ty1"
0 0 22 3 1 #" "
0 0 14 3 3 #"ty2"
0 0 22 3 2 #") "
0 0 20 3 2 #"#f"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"proc-type?"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 2 #"ty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 9 #"proc-type"
0 0 22 3 2 #" ("
0 0 14 3 2 #"t1"
0 0 22 3 1 #" "
0 0 14 3 2 #"t2"
0 0 22 3 2 #") "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 19 #"proc-type->arg-type"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 2 #"ty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 9 #"proc-type"
0 0 22 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 22 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 22 3 2 #") "
0 0 14 3 8 #"arg-type"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 19 #"proc-type->arg-type"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 19 3 21 #"\"Not a proc type: ~s\""
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 22 #"proc-type->result-type"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 2 #"ty"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 4 #"type"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 9 #"proc-type"
0 0 22 3 2 #" ("
0 0 14 3 8 #"arg-type"
0 0 22 3 1 #" "
0 0 14 3 11 #"result-type"
0 0 22 3 2 #") "
0 0 14 3 11 #"result-type"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 23 #"proc-type->result-types"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 19 3 21 #"\"Not a proc type: ~s\""
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 1 #";"
0 8         457 17 2 #"(\0"
2 #")\0"
90 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 21 #"type-to-external-form"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 6 #"lambda"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 2 #"ty"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 5 #"cases"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"type"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"ty"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 8 #"int-type"
7 #"wxtext\0"
3 4 #" () "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 3 #"int"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 9 #"bool-type"
7 #"wxtext\0"
3 4 #" () "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"bool"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 9 #"proc-type"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"arg-type"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"result-type"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 11 #"          ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 13 #"            ("
7 #"wxtext\0"
3 21 #"type-to-external-form"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"arg-type"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 12 #"            "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 2 #"->"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 13 #"            ("
7 #"wxtext\0"
3 21 #"type-to-external-form"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 11 #"result-type"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 8 #"       ("
7 #"wxtext\0"
3 10 #"named-type"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"name"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 4 #"name"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 14 #"qualified-type"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 7 #"modname"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"varname"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 11 #"          ("
7 #"wxtext\0"
3 4 #"list"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"from"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"modname"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"'"
7 #"wxtext\0"
3 4 #"take"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"varname"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 11 #"        )))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 27 #";;;; for module definitions"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 66
#";; maybe-lookup-module-in-list : Sym * Listof(Defn) -> Maybe(Defn)"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 27 #"maybe-lookup-module-in-list"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 11 #"module-defs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 11 #"module-defs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 20 3 2 #"#f"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 5 #"name1"
0 0 22 3 2 #" ("
0 0 14 3 23 #"module-definition->name"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 11 #"module-defs"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 22 3 1 #" "
0 0 14 3 5 #"name1"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 11 #"module-defs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 27 #"maybe-lookup-module-in-list"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 11 #"module-defs"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 68
#";; maybe-lookup-module-in-list : Sym * Listof(Defn) -> Defn OR Error"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 21 #"lookup-module-in-list"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 11 #"module-defs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"        (("
0 0 14 3 27 #"maybe-lookup-module-in-list"
0 0 22 3 1 #" "
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 11 #"module-defs"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"         "
0 0 14 3 2 #"=>"
0 0 22 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"mdef"
0 0 22 3 2 #") "
0 0 14 3 4 #"mdef"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 10 #"eopl:error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 21 #"lookup-module-in-list"
0 0 22 29 1 #"\n"
0 0 22 3 12 #"            "
0 0 19 3 19 #"\"unknown module ~s\""
0 0 22 29 1 #"\n"
0 0 22 3 12 #"            "
0 0 14 3 4 #"name"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 23 #"module-definition->name"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"m-defn"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 17 #"module-definition"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-defn"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 19 #"a-module-definition"
0 0 22 3 2 #" ("
0 0 14 3 6 #"m-name"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-type"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 14 3 6 #"m-name"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 28 #"module-definition->interface"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"m-defn"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 17 #"module-definition"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-defn"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 19 #"a-module-definition"
0 0 22 3 2 #" ("
0 0 14 3 6 #"m-name"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-type"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 14 3 6 #"m-type"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 23 #"module-definition->body"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 6 #"m-defn"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 17 #"module-definition"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-defn"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 19 #"a-module-definition"
0 0 22 3 2 #" ("
0 0 14 3 6 #"m-name"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-type"
0 0 22 3 1 #" "
0 0 14 3 6 #"m-body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"          "
0 0 14 3 6 #"m-body"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"val-decl?"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"decl"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 11 #"declaration"
0 0 22 3 1 #" "
0 0 14 3 4 #"decl"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 8 #"val-decl"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 3 2 #") "
0 0 20 3 2 #"#t"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"decl->name"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"decl"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 11 #"declaration"
0 0 22 3 1 #" "
0 0 14 3 4 #"decl"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 8 #"val-decl"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 3 2 #") "
0 0 14 3 4 #"name"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #" ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"decl->type"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"decl"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 11 #"declaration"
0 0 22 3 1 #" "
0 0 14 3 4 #"decl"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 8 #"val-decl"
0 0 22 3 2 #" ("
0 0 14 3 4 #"name"
0 0 22 3 1 #" "
0 0 14 3 2 #"ty"
0 0 22 3 2 #") "
0 0 14 3 2 #"ty"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"     "
0 0 22 29 1 #"\n"
0           0
