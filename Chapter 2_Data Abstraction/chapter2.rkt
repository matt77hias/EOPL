#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.6 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 30 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 62 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 34 139 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 176 48 96 0
0 0 -1 -1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 0 1 #"\0"
0 75 9 #"Consolas\0"
0.0 24 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 1750 0 27 3 10 #"#lang eopl"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 11 #"racket/base"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 8 #"rackunit"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 7 #"require"
0 0 23 3 1 #" "
0 0 14 3 9 #"slideshow"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 45 #";; Two representations of the natural numbers"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 4 #"zero"
0 0 23 3 2 #") "
0 0 20 3 1 #"0"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"0"
0 0 23 3 2 #") "
0 0 20 3 2 #"#t"
0 0 23 3 1 #" "
0 0 20 3 2 #"#f"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 9 #"successor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 1 #"1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"predecessor"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 3 #") ("
0 0 14 3 1 #"+"
0 0 23 3 1 #" "
0 0 14 3 1 #"n"
0 0 23 3 1 #" "
0 0 20 3 2 #"-1"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 4 #"zero"
0 0 17 3 2 #") "
0 0 17 3 4 #"'())"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 8 #"is-zero?"
0 0 17 3 1 #" "
0 0 17 3 1 #"n"
0 0 17 3 3 #") ("
0 0 17 3 5 #"null?"
0 0 17 3 1 #" "
0 0 17 3 3 #"n))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 9 #"successor"
0 0 17 3 1 #" "
0 0 17 3 1 #"n"
0 0 17 3 3 #") ("
0 0 17 3 4 #"cons"
0 0 17 3 1 #" "
0 0 17 3 1 #"0"
0 0 17 3 1 #" "
0 0 17 3 3 #"n))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 6 #"define"
0 0 17 3 2 #" ("
0 0 17 3 11 #"predecessor"
0 0 17 3 1 #" "
0 0 17 3 1 #"n"
0 0 17 3 3 #") ("
0 0 17 3 3 #"cdr"
0 0 17 3 1 #" "
0 0 17 3 3 #"n))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 23 3 2 #" ("
0 0 14 3 4 #"zero"
0 0 23 3 3 #")) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 23 3 2 #" ("
0 0 14 3 9 #"successor"
0 0 23 3 2 #" ("
0 0 14 3 4 #"zero"
0 0 23 3 4 #"))) "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 8 #"is-zero?"
0 0 23 3 2 #" ("
0 0 14 3 11 #"predecessor"
0 0 23 3 2 #" ("
0 0 14 3 9 #"successor"
0 0 23 3 2 #" ("
0 0 14 3 4 #"zero"
0 0 23 3 5 #")))) "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; The datatype of lambda-expressions"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 23 3 1 #" "
0 0 14 3 6 #"lc-exp"
0 0 23 3 1 #" "
0 0 14 3 7 #"lc-exp?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"var-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"lambda-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 9 #"bound-var"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 7 #"lc-exp?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 7 #"app-exp"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 7 #"lc-exp?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"rand"
0 0 23 3 1 #" "
0 0 14 3 7 #"lc-exp?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 37 #";; occurs-free? : Sym * Lcexp -> Bool"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"occurs-free?"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 10 #"search-var"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"lc-exp"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 3 #") ("
0 0 14 3 4 #"eqv?"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 2 #" ("
0 0 14 3 9 #"bound-var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 3 #"and"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 3 #"not"
0 0 23 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 1 #" "
0 0 14 3 9 #"bound-var"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 20 #"                   ("
0 0 14 3 12 #"occurs-free?"
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 2 #"or"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 12 #"occurs-free?"
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 1 #" "
0 0 14 3 5 #"rator"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 17 #"                ("
0 0 14 3 12 #"occurs-free?"
0 0 23 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 13 #";; test items"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"t1"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 12 #"occurs-free?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 2 #"t1"
0 0 23 3 2 #") "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"t2"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 12 #"occurs-free?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 2 #"t2"
0 0 23 3 2 #") "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"t3"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 12 #"occurs-free?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 2 #"t3"
0 0 23 3 2 #") "
0 0 20 3 2 #"#f"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"t4"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 12 #"occurs-free?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 2 #"t4"
0 0 23 3 2 #") "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"t5"
0 0 23 3 2 #" ("
0 0 14 3 7 #"app-exp"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 13 #"            ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 12 #"occurs-free?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 2 #"t5"
0 0 23 3 2 #") "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"t6"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 3 3 #") ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 14 3 12 #"check-equal?"
0 0 23 3 2 #" ("
0 0 14 3 12 #"occurs-free?"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 1 #" "
0 0 14 3 2 #"t6"
0 0 23 3 2 #") "
0 0 20 3 2 #"#t"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 36 #"; convert abstract syntax to strings"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 14 #"lc-exp->string"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"lc-exp"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 14 #"symbol->string"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 2 #" ("
0 0 14 3 9 #"bound-var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"\316\273\""
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 14 #"symbol->string"
0 0 23 3 1 #" "
0 0 14 3 9 #"bound-var"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                 "
0 0 19 3 3 #"\".\""
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 34 #"                                 ("
0 0 14 3 14 #"lc-exp->string"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 3 #"\"(\""
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 14 #"lc-exp->string"
0 0 23 3 1 #" "
0 0 14 3 5 #"rator"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 19 3 3 #"\" \""
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 31 #"                              ("
0 0 14 3 14 #"lc-exp->string"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 30 #"                              "
0 0 19 3 3 #"\")\""
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #";example "
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"t7"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 2 #" ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 3 #") ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 3 3 #") ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 14 #"lc-exp->string"
0 0 17 3 4 #" t7)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 64
#";; Some fun programming with recursive data types: drawing AST's"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 30 #";; tower: pict -> pict -> pict"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";; Draws p1"
0 0 23 29 1 #"\n"
0 0 17 3 10 #";;       |"
0 0 23 29 1 #"\n"
0 0 17 3 11 #";;       p2"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"tower"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 8         142 4 2 #"(\0"
2 #")\0"
27 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"lambda"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 2 #"p1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"p2"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 8 #"pin-line"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"vc-append"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"30"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"p1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"p2"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 2 #"p1"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"cb-find"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"p2"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"ct-find"
7 #"wxtext\0"
3 2 #"))"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 42 #";; triangle : pict -> pict -> pict -> pict"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";; Draws      top"
0 0 23 29 1 #"\n"
0 0 17 3 17 #";;           /  \\"
0 0 23 29 1 #"\n"
0 0 17 3 20 #";;        left right"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"triangle"
0 0 23 29 1 #"\n"
0 0 23 3 2 #"  "
0 8         247 4 2 #"(\0"
2 #")\0"
48 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"l"
7 #"wxtext\0"
3 1 #"a"
7 #"wxtext\0"
3 4 #"mbda"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"top"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"left"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"right"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 8 #"pin-line"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 8 #"pin-line"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"vc-append"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"30"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"top"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 9 #"hc-append"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"left"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"right"
7 #"wxtext\0"
3 3 #")) "
7 #"wxtext\0"
3 3 #"top"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"cb-find"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"left"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"ct-find"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 3 #"top"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"cb-find"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"right"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"ct-find"
7 #"wxtext\0"
3 2 #"))"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 27 #";; draw-adt : Lcexp -> Pict"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 8 #"draw-adt"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"lc-exp"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 14 3 4 #"text"
0 0 23 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 2 #") "
0 0 14 3 4 #"null"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 2 #" ("
0 0 14 3 9 #"bound-var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 15 3 4 #"let*"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                      [("
0 0 14 3 3 #"top"
0 0 23 3 2 #" ("
0 0 14 3 2 #"te"
0 0 14 3 2 #"xt"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"\316\273\""
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 50 #"                                                 ("
0 0 14 3 14 #"symbol->string"
0 0 23 3 1 #" "
0 0 14 3 9 #"bound-var"
0 0 23 3 3 #")) "
0 0 14 3 4 #"null"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 6 #"bottom"
0 0 23 3 2 #" ("
0 0 14 3 8 #"draw-adt"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 5 #"tower"
0 0 23 3 1 #" "
0 0 14 3 3 #"top"
0 0 23 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 15 3 4 #"let*"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                   [("
0 0 14 3 3 #"top"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"app\""
0 0 23 3 1 #" "
0 0 14 3 4 #"null"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 4 #"left"
0 0 23 3 2 #" ("
0 0 14 3 8 #"draw-adt"
0 0 23 3 1 #" "
0 0 14 3 5 #"rator"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 5 #"right"
0 0 23 3 2 #" ("
0 0 14 3 8 #"draw-adt"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 8 #"triangle"
0 0 23 3 1 #" "
0 0 14 3 3 #"top"
0 0 23 3 1 #" "
0 0 14 3 4 #"left"
0 0 23 3 1 #" "
0 0 14 3 5 #"right"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 10 #"; examples"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"draw-adt"
0 0 17 3 4 #" t7)"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"t8"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 29 1 #"\n"
0 0 23 3 15 #"              ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 23 29 1 #"\n"
0 0 23 3 27 #"                          ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 3 3 #") ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"draw-adt"
0 0 17 3 4 #" t8)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 28 #";; marking unbound variables"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 15 #"draw-adt-marked"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"lc-exp"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" [("
0 0 14 3 1 #"p"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 2 #") "
0 0 14 3 4 #"null"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 6 #"member"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #") "
0 0 14 3 1 #"p"
0 0 23 3 2 #" ("
0 0 14 3 5 #"frame"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 22 3 7 #"#:color"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                 ))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 2 #" ("
0 0 14 3 9 #"bound-var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 15 3 4 #"let*"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                      [("
0 0 14 3 3 #"top"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"\316\273\""
0 0 23 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 23 3 1 #" "
0 0 14 3 9 #"bound-var"
0 0 23 3 3 #")) "
0 0 14 3 4 #"null"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 6 #"bottom"
0 0 23 3 2 #" ("
0 0 14 3 15 #"draw-adt-marked"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 1 #" "
0 0 14 3 9 #"bound-var"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 5 #"tower"
0 0 23 3 1 #" "
0 0 14 3 3 #"top"
0 0 23 3 1 #" "
0 0 14 3 6 #"bottom"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 15 3 4 #"let*"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                   [("
0 0 14 3 3 #"top"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"app\""
0 0 23 3 1 #" "
0 0 14 3 4 #"null"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 4 #"left"
0 0 23 3 2 #" ("
0 0 14 3 15 #"draw-adt-marked"
0 0 23 3 1 #" "
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 5 #"right"
0 0 23 3 2 #" ("
0 0 14 3 15 #"draw-adt-marked"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 8 #"triangle"
0 0 23 3 1 #" "
0 0 14 3 3 #"top"
0 0 23 3 1 #" "
0 0 14 3 4 #"left"
0 0 23 3 1 #" "
0 0 14 3 5 #"right"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 11 #"draw-marked"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 3 #") ("
0 0 14 3 15 #"draw-adt-marked"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 4 #"()))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 25 #";; drawing binding arrows"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 71
(
 #";; A very simple datatype of environments of the form ((key value) ."
 #"..)"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 6 #"lookup"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 4 #"))) "
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 4 #"cadr"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 6 #"lookup"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #") "
0 0 14 3 3 #"sym"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 2 #" ("
0 0 14 3 3 #"mem"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #") "
0 0 20 3 2 #"#f"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 23 3 1 #" "
0 0 14 3 3 #"sym"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 2 #" ("
0 0 14 3 3 #"car"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 4 #"))) "
0 0 20 3 2 #"#t"
0 0 23 29 1 #"\n"
0 0 23 3 11 #"          ("
0 0 14 3 3 #"mem"
0 0 23 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #") "
0 0 14 3 3 #"sym"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 17 3 67
#";; We first annotate the AST with the pict's that make up it's tree"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 23 3 1 #" "
0 0 14 3 10 #"lc-exp-ext"
0 0 23 3 1 #" "
0 0 14 3 11 #"lc-exp-ext?"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"var-exp-ext"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"p-var"
0 0 23 3 1 #" "
0 0 14 3 5 #"pict?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 14 #"lambda-exp-ext"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 9 #"bound-var"
0 0 23 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 23 3 2 #" )"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 11 #"p-bound-var"
0 0 23 3 1 #" "
0 0 14 3 5 #"pict?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 23 3 1 #" "
0 0 14 3 11 #"lc-exp-ext?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 8 #"p-lambda"
0 0 23 3 1 #" "
0 0 14 3 5 #"pict?"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 14 3 11 #"app-exp-ext"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 11 #"lc-exp-ext?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 4 #"rand"
0 0 23 3 1 #" "
0 0 14 3 11 #"lc-exp-ext?"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 4 #"   ("
0 0 14 3 5 #"p-app"
0 0 23 3 1 #" "
0 0 14 3 5 #"pict?"
0 0 23 3 3 #")))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 46 #";; project out the pict of the main expression"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"ppict"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 7 #"exp-ext"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 10 #"lc-exp-ext"
0 0 23 3 1 #" "
0 0 14 3 7 #"exp-ext"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 11 #"var-exp-ext"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 5 #"p-var"
0 0 23 3 2 #") "
0 0 14 3 5 #"p-var"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 14 #"lambda-exp-ext"
0 0 23 3 2 #" ("
0 0 14 3 2 #"bv"
0 0 23 3 1 #" "
0 0 14 3 3 #"pbv"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"pl"
0 0 23 3 2 #") "
0 0 14 3 2 #"pl"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 11 #"app-exp-ext"
0 0 23 3 2 #" ("
0 0 14 3 2 #"r1"
0 0 23 3 1 #" "
0 0 14 3 2 #"r2"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 2 #") "
0 0 14 3 1 #"p"
0 0 23 3 4 #"))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 96
(
 #";; lc-exp-to-ext : Lcexp -> Lc-exp-ext (that associates the appropri"
 #"ate pict with each AST node)"
) 0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 13 #"lc-exp-to-ext"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 6 #"lc-exp"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 3 #") ("
0 0 14 3 11 #"var-exp-ext"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 2 #") "
0 0 14 3 4 #"null"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 4 #")) )"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 2 #" ("
0 0 14 3 9 #"bound-var"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 19 #"                  ("
0 0 15 3 4 #"let*"
0 0 23 3 1 #" "
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                      [("
0 0 14 3 3 #"top"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 23 3 1 #" "
0 0 19 3 4 #"\"\316\273\""
0 0 23 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 23 3 1 #" "
0 0 14 3 9 #"bound-var"
0 0 23 3 3 #")) "
0 0 14 3 4 #"null"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 8 #"body-ext"
0 0 23 3 2 #" ("
0 0 14 3 13 #"lc-exp-to-ext"
0 0 23 3 1 #" "
0 0 14 3 4 #"body"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 4 #"full"
0 0 23 3 2 #" ("
0 0 14 3 5 #"tower"
0 0 23 3 1 #" "
0 0 14 3 3 #"top"
0 0 23 3 2 #" ("
0 0 14 3 5 #"ppict"
0 0 23 3 1 #" "
0 0 14 3 8 #"body-ext"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 14 #"lambda-exp-ext"
0 0 23 3 1 #" "
0 0 14 3 9 #"bound-var"
0 0 23 3 1 #" "
0 0 14 3 3 #"top"
0 0 23 3 1 #" "
0 0 14 3 8 #"body-ext"
0 0 23 3 1 #" "
0 0 14 3 4 #"full"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 22 #"                    ))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 16 #"               ("
0 0 15 3 4 #"let*"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                   [("
0 0 14 3 3 #"top"
0 0 23 3 2 #" ("
0 0 14 3 4 #"text"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"app\""
0 0 23 3 1 #" "
0 0 14 3 4 #"null"
0 0 23 3 1 #" "
0 0 20 3 2 #"30"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 9 #"rator-ext"
0 0 23 3 2 #" ("
0 0 14 3 13 #"lc-exp-to-ext"
0 0 23 3 1 #" "
0 0 14 3 5 #"rator"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 8 #"rand-ext"
0 0 23 3 2 #" ("
0 0 14 3 13 #"lc-exp-to-ext"
0 0 23 3 1 #" "
0 0 14 3 4 #"rand"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 21 #"                    ("
0 0 14 3 4 #"full"
0 0 23 3 2 #" ("
0 0 14 3 8 #"triangle"
0 0 23 3 1 #" "
0 0 14 3 3 #"top"
0 0 23 3 2 #" ("
0 0 14 3 5 #"ppict"
0 0 23 3 1 #" "
0 0 14 3 9 #"rator-ext"
0 0 23 3 3 #") ("
0 0 14 3 5 #"ppict"
0 0 23 3 1 #" "
0 0 14 3 8 #"rand-ext"
0 0 23 3 4 #")))]"
0 0 23 29 1 #"\n"
0 0 23 3 18 #"                 ("
0 0 14 3 11 #"app-exp-ext"
0 0 23 3 1 #" "
0 0 14 3 9 #"rator-ext"
0 0 23 3 1 #" "
0 0 14 3 8 #"rand-ext"
0 0 23 3 1 #" "
0 0 14 3 4 #"full"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 97
(
 #";; now use this to draw more interesting diagrams, e.g. arrow from u"
 #"se of var to binding location"
) 0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 12 #"draw-binding"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 7 #"exp-ext"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 23 3 1 #" "
0 0 14 3 10 #"lc-exp-ext"
0 0 23 3 1 #" "
0 0 14 3 7 #"exp-ext"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 11 #"var-exp-ext"
0 0 23 3 2 #" ("
0 0 14 3 3 #"var"
0 0 23 3 1 #" "
0 0 14 3 5 #"p-var"
0 0 23 3 3 #") ("
0 0 14 3 2 #"if"
0 0 23 3 2 #" ("
0 0 14 3 3 #"mem"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 3 #"var"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                   "
0 0 17 3 43 #"; draw arrow from p-var to (lookup env var)"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                   "
0 8         132 4 2 #"(\0"
2 #")\0"
25 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 14 #"pin-arrow-line"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"5"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"p"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"p-var"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"ct-find"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 6 #"lookup"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"env"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"var"
7 #"wxtext\0"
3 2 #") "
7 #"wxtext\0"
3 7 #"cb-find"
7 #"wxtext\0"
3 9 #" #:color "
7 #"wxtext\0"
3 5 #"\"red\""
7 #"wxtext\0"
3 15 #" #:start-angle "
7 #"wxtext\0"
3 1 #"2"
7 #"wxtext\0"
3 13 #" #:end-angle "
7 #"wxtext\0"
3 1 #"1"
7 #"wxtext\0"
3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 35 #"                                   "
0 0 17 3 29 #"; draw a red box around p-var"
0 0 23 29 1 #"\n"
0 0 23 3 36 #"                                   ("
0 0 14 3 8 #"pin-over"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 1 #" "
0 0 14 3 5 #"p-var"
0 0 23 3 1 #" "
0 0 14 3 7 #"lt-find"
0 0 23 3 2 #" ("
0 0 14 3 5 #"frame"
0 0 23 3 1 #" "
0 0 14 3 5 #"p-var"
0 0 23 3 1 #" "
0 0 22 3 7 #"#:color"
0 0 23 3 1 #" "
0 0 19 3 5 #"\"red\""
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 37 #"                                   ))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 14 #"lambda-exp-ext"
0 0 23 3 2 #" ("
0 0 14 3 2 #"bv"
0 0 23 3 1 #" "
0 0 14 3 3 #"pbv"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 1 #" "
0 0 14 3 2 #"pl"
0 0 23 3 3 #") ("
0 0 14 3 12 #"draw-binding"
0 0 23 3 1 #" "
0 0 14 3 1 #"b"
0 0 23 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 2 #"bv"
0 0 23 3 1 #" "
0 0 14 3 3 #"pbv"
0 0 23 3 2 #") "
0 0 14 3 3 #"env"
0 0 23 3 2 #") "
0 0 14 3 1 #"p"
0 0 23 3 2 #"))"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 11 #"app-exp-ext"
0 0 23 3 2 #" ("
0 0 14 3 2 #"r1"
0 0 23 3 1 #" "
0 0 14 3 2 #"r2"
0 0 23 3 1 #" "
0 0 14 3 2 #"p2"
0 0 23 3 3 #") ("
0 0 14 3 12 #"draw-binding"
0 0 23 3 1 #" "
0 0 14 3 2 #"r1"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 2 #" ("
0 0 14 3 12 #"draw-binding"
0 0 23 3 1 #" "
0 0 14 3 2 #"r2"
0 0 23 3 1 #" "
0 0 14 3 3 #"env"
0 0 23 3 1 #" "
0 0 14 3 1 #"p"
0 0 23 3 6 #"))))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 4 #"draw"
0 0 23 29 1 #"\n"
0 0 23 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 23 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 23 3 2 #") "
0 0 23 29 1 #"\n"
0 0 23 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 23 3 3 #" [("
0 0 14 3 1 #"l"
0 0 23 3 2 #" ("
0 0 14 3 13 #"lc-exp-to-ext"
0 0 23 3 1 #" "
0 0 14 3 3 #"exp"
0 0 23 3 3 #"))]"
0 0 23 29 1 #"\n"
0 0 23 3 7 #"      ("
0 0 14 3 12 #"draw-binding"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 23 3 4 #"() ("
0 0 14 3 5 #"ppict"
0 0 23 3 1 #" "
0 0 14 3 1 #"l"
0 0 23 3 5 #")))))"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 17 3 9 #"; example"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 2 #"t9"
0 0 23 3 2 #" ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 23 3 5 #"     "
0 0 23 29 1 #"\n"
0 0 23 3 24 #"                       ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 23 3 4 #")   "
0 0 23 29 1 #"\n"
0 0 23 3 33 #"                                ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 29 1 #"\n"
0 0 23 3 45 #"                                            ("
0 0 14 3 10 #"lambda-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 23 29 1 #"\n"
0 0 23 3 57 #"                                                        ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"y"
0 0 23 3 1 #")"
0 0 23 29 1 #"\n"
0 0 23 3 66
#"                                                                 ("
0 0 14 3 7 #"app-exp"
0 0 23 3 2 #" ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"z"
0 0 23 3 3 #") ("
0 0 14 3 7 #"var-exp"
0 0 23 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"w"
0 0 23 3 8 #"))))))))"
0 0 23 29 1 #"\n"
0 0 17 3 2 #";("
0 0 17 3 8 #"draw t9)"
0 0 23 29 1 #"\n"
0 0 23 29 1 #"\n"
0 0 23 3 1 #"("
0 0 15 3 6 #"define"
0 0 23 3 1 #" "
0 0 14 3 5 #"terms"
0 0 23 3 2 #" ("
0 0 14 3 4 #"list"
0 0 23 3 1 #" "
0 0 14 3 2 #"t1"
0 0 23 3 1 #" "
0 0 14 3 2 #"t2"
0 0 23 3 1 #" "
0 0 14 3 2 #"t3"
0 0 23 3 1 #" "
0 0 14 3 2 #"t4"
0 0 23 3 1 #" "
0 0 14 3 2 #"t5"
0 0 23 3 1 #" "
0 0 14 3 2 #"t6"
0 0 23 3 1 #" "
0 0 14 3 2 #"t7"
0 0 23 3 1 #" "
0 0 14 3 2 #"t8"
0 0 23 3 1 #" "
0 0 14 3 2 #"t9"
0 0 23 3 2 #"))"
0           0
