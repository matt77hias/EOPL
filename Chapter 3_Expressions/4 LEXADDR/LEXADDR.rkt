#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.3.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 29 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 54 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 9 #"Consolas\0"
0 18 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1300 0 26 3 10 #"#lang eopl"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"require"
0 0 22 3 1 #" "
0 0 19 3 12 #"\"syntax.rkt\""
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 14 3 7 #"provide"
0 0 22 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 66
#";;; an expressed value is either a number, a boolean or a procval."
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 22 3 1 #" "
0 0 14 3 6 #"expval"
0 0 22 3 1 #" "
0 0 14 3 7 #"expval?"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 7 #"num-val"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 5 #"value"
0 0 22 3 1 #" "
0 0 14 3 7 #"number?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"bool-val"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 7 #"boolean"
0 0 22 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 8 #"proc-val"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 14 3 5 #"proc?"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 30 #";; expval->num : ExpVal -> Int"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"expval->num"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 6 #"expval"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 7 #"num-val"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 2 #") "
0 0 14 3 3 #"num"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 22 #"expval-extractor-error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 3 #"num"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";; expval->bool : ExpVal -> Bool"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"expval->bool"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 6 #"expval"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 8 #"bool-val"
0 0 22 3 2 #" ("
0 0 14 3 4 #"bool"
0 0 22 3 2 #") "
0 0 14 3 4 #"bool"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 22 #"expval-extractor-error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"bool"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 32 #";; expval->proc : ExpVal -> Proc"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 12 #"expval->proc"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"v"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 6 #"expval"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 8 #"proc-val"
0 0 22 3 2 #" ("
0 0 14 3 4 #"proc"
0 0 22 3 2 #") "
0 0 14 3 4 #"proc"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 22 #"expval-extractor-error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 14 3 1 #"v"
0 0 22 3 5 #")))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 22 #"expval-extractor-error"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 7 #"variant"
0 0 22 3 1 #" "
0 0 14 3 5 #"value"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 10 #"eopl:error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 17 #"expval-extractors"
0 0 22 3 1 #" "
0 0 19 3 28 #"\"Looking for a ~s, found ~s\""
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 14 3 7 #"variant"
0 0 22 3 1 #" "
0 0 14 3 5 #"value"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 44 #";;;;;;;;;;;;;;;; procedures ;;;;;;;;;;;;;;;;"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 28 #";; proc? : SchemeVal -> Bool"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";; procedure : Exp * Nameless-env -> Proc"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 14 3 5 #"proc?"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 14 3 9 #"procedure"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"   "
0 0 17 3 65
#";; in LEXADDR, bound variables are replaced by %nameless-vars, so"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"   "
0 0 17 3 47 #";; there is no need to declare bound variables."
0 0 22 29 1 #"\n"
0 0 22 3 3 #"   "
0 0 17 3 17 #";; (bvar symbol?)"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"   "
0 0 17 3 50 #";; and the closure contains a nameless environment"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"   ("
0 0 14 3 3 #"env"
0 0 22 3 1 #" "
0 0 14 3 21 #"nameless-environment?"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 72
(
 #";;;;;;;;;;;;;;;; environment constructors and observers ;;;;;;;;;;;;"
 #";;;;"
) 0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 44 #";; nameless-environment? : SchemeVal -> Bool"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; Page: 99"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 21 #"nameless-environment?"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"    (("
0 0 14 3 7 #"list-of"
0 0 22 3 1 #" "
0 0 14 3 7 #"expval?"
0 0 22 3 2 #") "
0 0 14 3 1 #"x"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 42 #";; empty-nameless-env : () -> Nameless-env"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; Page: 99"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 18 #"empty-nameless-env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 45 #";; empty-nameless-env? : Nameless-env -> Bool"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 19 #"empty-nameless-env?"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 1 #"x"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 1 #"x"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 62
#";; extend-nameless-env : ExpVal * Nameless-env -> Nameless-env"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; Page: 99"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 19 #"extend-nameless-env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 56 #";; apply-nameless-env : Nameless-env * Lexaddr -> ExpVal"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; Page: 99"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 18 #"apply-nameless-env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 12 #"nameless-env"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 8 #"list-ref"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 53 #";;;;;;;;;;;;;;;; initial environment ;;;;;;;;;;;;;;;;"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 41 #";; init-nameless-env : () -> Nameless-env"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 17 #"init-nameless-env"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 19 #"extend-nameless-env"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 7 #"num-val"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 1 22 65 1 #"\t"
0 1 22 65 1 #"\t"
0 1 22 65 1 #"\t"
0 0 17 3 7 #"; was i"
0 0 22 29 1 #"\n"
0 0 22 3 6 #"     ("
0 0 14 3 19 #"extend-nameless-env"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 7 #"num-val"
0 0 22 3 1 #" "
0 0 20 3 1 #"5"
0 0 22 3 1 #")"
0 1 22 65 1 #"\t"
0 1 22 65 1 #"\t"
0 1 22 65 1 #"\t"
0 0 17 3 7 #"; was v"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 19 #"extend-nameless-env"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 7 #"num-val"
0 0 22 3 1 #" "
0 0 20 3 2 #"10"
0 0 22 3 1 #")"
0 1 22 65 1 #"\t"
0 1 22 65 1 #"\t"
0 1 22 65 1 #"\t"
0 0 17 3 7 #"; was x"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 18 #"empty-nameless-env"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 60
#";;;;;;;;;;;;;;;; lexical address calculator ;;;;;;;;;;;;;;;;"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 55 #";; translation-of-program : Program -> Nameless-program"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; Page: 96"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 22 #"translation-of-program"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 9 #"a-program"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 9 #"a-program"
0 0 22 3 20 #"                    "
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 2 #" ("
0 0 14 3 9 #"init-senv"
0 0 22 3 7 #")))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 46 #";; translation-of : Exp * Senv -> Nameless-exp"
0 0 22 29 1 #"\n"
0 0 17 3 10 #";; Page 97"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 14 #"translation-of"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 10 #"expression"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 9 #"const-exp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 3 #") ("
0 0 14 3 9 #"const-exp"
0 0 22 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 8 #"diff-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 8 #"diff-exp"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 9 #"zero?-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 9 #"zero?-exp"
0 0 22 29 1 #"\n"
0 0 22 3 19 #"                  ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 6 #"if-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 6 #"if-exp"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp3"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 7 #"var-exp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 16 #"nameless-var-exp"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 10 #"apply-senv"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 7 #"let-exp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 16 #"               ("
0 0 14 3 16 #"nameless-let-exp"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 13 #")            "
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 29 1 #"\n"
0 0 22 3 33 #"                                ("
0 0 14 3 11 #"extend-senv"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 8 #"proc-exp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 17 #"nameless-proc-exp"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 29 1 #"\n"
0 0 22 3 34 #"                                 ("
0 0 14 3 11 #"extend-senv"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 8 #"call-exp"
0 0 22 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 22 3 1 #" "
0 0 14 3 4 #"rand"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 8 #"call-exp"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 5 #"rator"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"rand"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 3 2 #" ("
0 0 14 3 32 #"report-invalid-source-expression"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"      )))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 32 #"report-invalid-source-expression"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 10 #"eopl:error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 0 22 3 16 #"                "
0 0 19 3 39 #"\"Illegal expression in source code: ~s\""
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 53 #";;;;;;;;;;;;;;;; static environments ;;;;;;;;;;;;;;;;"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 22 #";;; Senv = Listof(Sym)"
0 0 22 29 1 #"\n"
0 0 17 3 15 #";;; Lexaddr = N"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 26 #";; empty-senv : () -> Senv"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; Page: 95"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"empty-senv"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 4 #"    "
0 0 20 3 1 #"'"
0 0 22 3 4 #"()))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 35 #";; extend-senv : Var * Senv -> Senv"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; Page: 95"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 11 #"extend-senv"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 37 #";; apply-senv : Senv * Var -> Lexaddr"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; Page: 95"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 10 #"apply-senv"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 4 #"senv"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 5 #"null?"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 3 #") ("
0 0 14 3 18 #"report-unbound-var"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"      (("
0 0 14 3 4 #"eqv?"
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 2 #" ("
0 0 14 3 3 #"car"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"       "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"       ("
0 0 14 3 1 #"+"
0 0 22 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 2 #" ("
0 0 14 3 10 #"apply-senv"
0 0 22 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 22 3 1 #" "
0 0 14 3 4 #"senv"
0 0 22 3 2 #") "
0 0 14 3 3 #"var"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 18 #"report-unbound-var"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"var"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 10 #"eopl:error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 14 #"translation-of"
0 0 22 3 1 #" "
0 0 19 3 30 #"\"unbound variable in code: ~s\""
0 0 22 3 1 #" "
0 0 14 3 3 #"var"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 25 #";; init-senv : () -> Senv"
0 0 22 29 1 #"\n"
0 0 17 3 11 #";; Page: 96"
0 0 22 29 1 #"\n"
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 9 #"init-senv"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 22 3 3 #" ()"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 14 3 11 #"extend-senv"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"i"
0 0 22 29 1 #"\n"
0 0 22 3 18 #"                 ("
0 0 14 3 11 #"extend-senv"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"v"
0 0 22 29 1 #"\n"
0 0 22 3 31 #"                              ("
0 0 14 3 11 #"extend-senv"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 1 #"x"
0 0 22 29 1 #"\n"
0 0 22 3 44 #"                                           ("
0 0 14 3 10 #"empty-senv"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 17 3 49 #";;;;;;;;;;;;;;;; the interpreter ;;;;;;;;;;;;;;;;"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 52 #";; value-of-translation : Nameless-program -> ExpVal"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 1 #";"
0 8         162 17 2 #"(\0"
2 #")\0"
31 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"define"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 20 #"value-of-translation"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 5 #"    ("
7 #"wxtext\0"
3 6 #"lambda"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 3 #"pgm"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"      ("
7 #"wxtext\0"
3 5 #"cases"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"program"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"pgm"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 9 #"        ("
7 #"wxtext\0"
3 9 #"a-program"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 4 #"exp1"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 11 #"          ("
7 #"wxtext\0"
3 8 #"value-of"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 4 #"exp1"
7 #"wxtext\0"
3 2 #" ("
7 #"wxtext\0"
3 17 #"init-nameless-env"
7 #"wxtext\0"
3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 52 #";; value-of-translation : Nameless-program -> ExpVal"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 12 #";; Page: 100"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 16 #"value-of-program"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 7 #"program"
0 0 22 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 9 #"a-program"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 2 #" ("
0 0 14 3 17 #"init-nameless-env"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 51 #";; value-of : Nameless-exp * Nameless-env -> ExpVal"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 8 #"value-of"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 10 #"expression"
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 9 #"const-exp"
0 0 22 3 2 #" ("
0 0 14 3 3 #"num"
0 0 22 3 3 #") ("
0 0 14 3 7 #"num-val"
0 0 22 3 1 #" "
0 0 14 3 3 #"num"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 8 #"diff-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 1 22 65 1 #"\t"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"expval->num"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 1 22 65 1 #"\t"
0 0 22 3 5 #"    ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 4 #"val2"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 1 22 65 1 #"\t"
0 0 22 3 3 #"  ("
0 0 14 3 11 #"expval->num"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 1 22 65 1 #"\t"
0 0 22 3 5 #"    ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 7 #"num-val"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 0 22 3 7 #"      ("
0 0 14 3 1 #"-"
0 0 22 3 1 #" "
0 0 14 3 4 #"val1"
0 0 22 3 1 #" "
0 0 14 3 4 #"val2"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 3 8 #"        "
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 9 #"zero?-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 0 22 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 4 #"val1"
0 0 22 3 2 #" ("
0 0 14 3 11 #"expval->num"
0 0 22 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 0 22 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 5 #"zero?"
0 0 22 3 1 #" "
0 0 14 3 4 #"val1"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 0 22 3 7 #"      ("
0 0 14 3 8 #"bool-val"
0 0 22 3 1 #" "
0 0 20 3 2 #"#t"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 0 22 3 7 #"      ("
0 0 14 3 8 #"bool-val"
0 0 22 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 6 #"if-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp0"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 2 #") "
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 2 #"if"
0 0 22 3 2 #" ("
0 0 14 3 12 #"expval->bool"
0 0 22 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp0"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp2"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 8 #"call-exp"
0 0 22 3 2 #" ("
0 0 14 3 5 #"rator"
0 0 22 3 1 #" "
0 0 14 3 4 #"rand"
0 0 22 3 11 #")          "
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 4 #"proc"
0 0 22 3 2 #" ("
0 0 14 3 12 #"expval->proc"
0 0 22 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 5 #"rator"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 17 #"                ("
0 0 14 3 3 #"arg"
0 0 22 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"rand"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 0 22 3 5 #"    ("
0 0 14 3 15 #"apply-procedure"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 16 #"nameless-var-exp"
0 0 22 3 2 #" ("
0 0 14 3 1 #"n"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 18 #"apply-nameless-env"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 1 #" "
0 0 14 3 1 #"n"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 16 #"nameless-let-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 15 3 3 #"let"
0 0 22 3 3 #" (("
0 0 14 3 3 #"val"
0 0 22 3 2 #" ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"exp1"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 29 1 #"\n"
0 0 22 3 15 #"              ("
0 0 14 3 19 #"extend-nameless-env"
0 0 22 3 1 #" "
0 0 14 3 3 #"val"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 4 #"))))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 17 #"nameless-proc-exp"
0 0 22 3 2 #" ("
0 0 14 3 4 #"body"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 8 #"proc-val"
0 0 22 29 1 #"\n"
0 0 22 3 13 #"            ("
0 0 14 3 9 #"procedure"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 12 #"nameless-env"
0 0 22 3 3 #")))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 22 29 1 #"\n"
0 0 22 3 10 #"         ("
0 0 14 3 10 #"eopl:error"
0 0 22 3 1 #" "
0 0 20 3 1 #"'"
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 22 29 1 #"\n"
0 1 22 65 1 #"\t"
0 0 22 3 4 #"    "
0 0 19 3 43 #"\"Illegal expression in translated code: ~s\""
0 0 22 3 1 #" "
0 0 14 3 3 #"exp"
0 0 22 3 2 #"))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"        )))"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 2 #"  "
0 0 17 3 44 #";; apply-procedure : Proc * ExpVal -> ExpVal"
0 0 22 29 1 #"\n"
0 0 22 29 1 #"\n"
0 0 22 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 22 3 1 #" "
0 0 14 3 15 #"apply-procedure"
0 0 22 29 1 #"\n"
0 0 22 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 22 3 2 #" ("
0 0 14 3 5 #"proc1"
0 0 22 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 22 3 1 #" "
0 0 14 3 4 #"proc"
0 0 22 3 1 #" "
0 0 14 3 5 #"proc1"
0 0 22 29 1 #"\n"
0 0 22 3 9 #"        ("
0 0 14 3 9 #"procedure"
0 0 22 3 2 #" ("
0 0 14 3 4 #"body"
0 0 22 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 22 3 1 #")"
0 0 22 29 1 #"\n"
0 0 22 3 11 #"          ("
0 0 14 3 8 #"value-of"
0 0 22 3 1 #" "
0 0 14 3 4 #"body"
0 0 22 3 2 #" ("
0 0 14 3 19 #"extend-nameless-env"
0 0 22 3 1 #" "
0 0 14 3 3 #"arg"
0 0 22 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 22 3 6 #"))))))"
0 0 22 29 1 #"\n"
0           0
